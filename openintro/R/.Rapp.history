`normTail` <-#
function(m=0, s=1, L=NULL, U=NULL, M=NULL, df=1000, curveColor=1, border=1, col='#CCCCCC', xlim=NULL, ylim=NULL, xlab='', ylab='', digits=2, axes=1, detail=999, xLab=c('number', 'symbol'), cex.axis=1, xAxisIncr=1, ...){#
	if(is.null(xlim)[1]){#
		xlim <- m + c(-1,1)*3.5*s#
	}#
	temp <- range(xlim)#
	x    <- seq(xlim[1] - temp/4, xlim[2] + temp/4,l=detail)#
	y    <- dt((x-m)/s, df)/s#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,y))#
	}#
	plot(x, y, type='l', xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, axes=FALSE, col=curveColor, ...)#
	if(!is.null(L[1])){#
		these <- (x <= L)#
		X <- c(x[these][1], x[these], rev(x[these])[1])#
		Y <- c(0, y[these], 0)#
		polygon(X, Y, border=border, col=col)#
	}#
	if(!is.null(U[1])){#
		these <- (x >= U)#
		X <- c(x[these][1], x[these], rev(x[these])[1])#
		Y <- c(0, y[these], 0)#
		polygon(X, Y, border=border, col=col)#
	}#
	if(all(!is.null(M[1:2]))){#
		these <- (x >= M[1] & x <= M[2])#
		X <- c(x[these][1], x[these], rev(x[these])[1])#
		Y <- c(0, y[these], 0)#
		polygon(X, Y, border=border, col=col)#
	}#
#
	if(axes == 1 || axes > 2){#
		if(xLab[1]=='symbol'){#
			xAt  <- m + (-3:3)*s#
			xLab <- expression(mu-3*sigma, mu-2*sigma,#
							mu-sigma, mu,	mu+sigma,#
							mu+2*sigma, mu+3*sigma)#
		} else if(xLab[1] != 'number'){#
			stop('Argument "xLab" not recognized.\n')#
		} else {#
			temp <- seq(xAxisIncr, max(abs(xlim-m))/s, xAxisIncr)*s#
			xAt <- m + c(-temp, 0, temp)#
			xLab <- round(xAt, digits=digits)#
		}#
	}#
	if(axes > 2){#
		axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)#
		buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)#
	} else if(axes > 1){#
		buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)#
	} else if(axes > 0){#
		axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)#
	}#
#
	abline(h=0)#
}
dotPlotStack <- function(x, center, radius=1, seed=1, addDots=TRUE, ...){#
  set.seed(seed)#
  x <- sample(x)#
  y <- rep(NA, length(x))#
  y[1] <- 1#
  for(i in 2:length(x)){#
    add <- TRUE#
    for(s in seq(radius, i*radius, radius/20)){#
      these <- 1:(i-1)#
      dx    <- (x[i] - x[these])^2#
      dy    <- (s - y[these])^2#
      if(any(dx+dy < radius^2) || !add){#
        next#
      } else {#
        if(addDots){#
          points(x[i], s, ...)#
        }#
        y[i] <- s#
        add  <- FALSE#
      }#
    }#
  }#
  invisible(list(max(y)+radius, x, y))#
}
prompt(dotPlotStack)
ContingencyTableToDataFrame <-#
function (x, rn, cn, dfn = c("row.var", "col.var")) {#
  rs <- rowSums(x)#
  cs <- colSums(x)#
  v1 <- rep(rn, rs)#
  v2 <- c()#
  for (i in 1:nrow(x)) {#
    v2 <- append(v2, rep(cn, x[i, ]))#
  }#
  d <- data.frame(v1, v2)#
  colnames(d) <- dfn#
  return(d)#
}#
# ContingencyTableToDataFrame(matrix(1:4, 2), c("row1", "row2"), c("col1", "col2"), c("rows", "cols"))
ContingencyTableToDataFrame(matrix(1:4, 2), c("row1", "row2"), c("col1", "col2"), c("rows", "cols"))
matrix(1:4, 2)
prompt(ContingencyTableToDataFrame)
ContingencyTableToDataFrame <-#
function (x,#
          rn = row.names(x),#
          cn = colnames(x),#
          dfn = c("row.var", "col.var")) {#
  rs <- rowSums(x)#
  cs <- colSums(x)#
  v1 <- rep(rn, rs)#
  v2 <- c()#
  for (i in 1:nrow(x)) {#
    v2 <- append(v2, rep(cn, x[i, ]))#
  }#
  d <- data.frame(v1, v2)#
  colnames(d) <- dfn#
  return(d)#
}#
# ContingencyTableToDataFrame(matrix(1:4, 2), c("row1", "row2"), c("col1", "col2"), c("rows", "cols"))
ContingencyTableToDataFrame(matrix(1:4, 2)
)
x <- matrix(1:4, 2); row.names(x) <- c("r1", "r2"); colnames(x) <- c("c1", "c2"); ContingencyTableToDataFrame(x)
x   <- matrix(1:4, 2)#
rn  <- c("row1", "row2")#
cn  <- c("col1", "col2")#
dfn <- c("rows", "cols")#
ContingencyTableToDataFrame(x, rn, cn, dfn)
x            <- matrix(1:4, 2)#
row.names(x) <- c("r1", "r2")#
colnames(x)  <- c("c1", "c2")#
ContingencyTableToDataFrame(x)
